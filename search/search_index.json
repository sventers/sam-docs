{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About This is stackoverflow links and code snippet for reference Built with mkdocs Forever wip, like taking notes in hopes of remembering better","title":"About"},{"location":"#about","text":"This is stackoverflow links and code snippet for reference Built with mkdocs Forever wip, like taking notes in hopes of remembering better","title":"About"},{"location":"0chops_bash/","text":"Bash Chops good cheatsheat 1 -> grep find sed awk grep -rnw '/path/to/somewhere/' -e 'pattern' # look through current directory's hieracrhy for text in file find . -name \"*.bak\" -type f -delete # recursively delete all files of a single extension find $directory -type f -name \"*.in\" # recursive print all file with extension .py find ./ -name '*article*' | xargs -I '{}' mv {} ../backup find ./ -name '*article*' | xargs mv -t ../backup -> operators A ; B # Run A and then B, regardless of success of A A && B # Run B if and only if A succeeded A || B # Run B if and only if A failed A & # Run A in background. * # wildcard for array of chars ? # wildcard for single char > # redirect shell output to file appends >> # redirect shell output to file overwrites ! # boolean NOT && # boolean AND || # boolean OR ** # exponentiation % # modulo ; # separate lines in terminal prompt -> Networking # show list of all http port connections active, use sudo with lsof to include system connections netstat -ap tcp || grep -i \u201clisten\u201d lsof -PiTCP -sTCP:LISTEN # make an http request and trace out what happens on the way curl -verbose -trace-ascii debugdumplog.txt -o redirect output URL = -> Regex [a-z]_ [0-9]_ ^ .\\* -> Navigation which { package } # show address of version in use exec bash # restart shell printenv # show all env variables !histnum #run command from history chsh -s # change shell zsh bash etc -> Filesystem df # show disk files on machine whoami # display user name chmod mkdir { name } # makes a directory with a name mv # move files to new directory pwd # what is present working directory stat --help # lots of good stuff ps -Eafx:: # shows information about the current processes running in shell -> Pipes # word count wc dip lays word -c, line -l, character -m, bytes -w cat less sort -n head -n { how many } { file } tail -n { num } { file } file name { * [ ab ] .* } \u2014\u2014> prints files with a or b in that position uniq { file } \u2014> removes adjacent duplicated lines cut \u2014> removes portions of lines from a file w \u2014> prints current user and what they are doing # wc all text files in current directory wc *.txt -> Loops need to review that # starts by expanding *.filetype for { x } in { *.filetype } ; do blah ; done ; # prints to output echo { text for anything to output } !! \u2014\u2014\u2014> last run command !$ \u2014\u2014\u2014\u2014> run last word of previous command -> Scripts bash { script.sh } { $inputvar1 } -> Customizing # PS1 is the environment variable that contains the shell prompt. # '\\e[0;31m' is the terminal escape sequence to change color to red. # '\\u' is the user name # '\\h' is the host name # '\\W' is the current working directory # '\\e[m' means \"return to the default text color\" PS1 = \"\\e[0;32m\\h \\W\\:~ \\e[m \" #to yellow PS1 = \"\\e[0;33mjaja@ny-vid;~ \\e[m \" PS1 = \u2018 { what the prompt should be } \u2019 ex - $","title":"Bash Chops"},{"location":"0chops_bash/#bash-chops","text":"good cheatsheat 1","title":"Bash Chops"},{"location":"0chops_bash/#-grep-find-sed-awk","text":"grep -rnw '/path/to/somewhere/' -e 'pattern' # look through current directory's hieracrhy for text in file find . -name \"*.bak\" -type f -delete # recursively delete all files of a single extension find $directory -type f -name \"*.in\" # recursive print all file with extension .py find ./ -name '*article*' | xargs -I '{}' mv {} ../backup find ./ -name '*article*' | xargs mv -t ../backup","title":"-&gt; grep find sed awk"},{"location":"0chops_bash/#-operators","text":"A ; B # Run A and then B, regardless of success of A A && B # Run B if and only if A succeeded A || B # Run B if and only if A failed A & # Run A in background. * # wildcard for array of chars ? # wildcard for single char > # redirect shell output to file appends >> # redirect shell output to file overwrites ! # boolean NOT && # boolean AND || # boolean OR ** # exponentiation % # modulo ; # separate lines in terminal prompt","title":"-&gt; operators"},{"location":"0chops_bash/#-networking","text":"# show list of all http port connections active, use sudo with lsof to include system connections netstat -ap tcp || grep -i \u201clisten\u201d lsof -PiTCP -sTCP:LISTEN # make an http request and trace out what happens on the way curl -verbose -trace-ascii debugdumplog.txt -o redirect output URL =","title":"-&gt; Networking"},{"location":"0chops_bash/#-regex","text":"[a-z]_ [0-9]_ ^ .\\*","title":"-&gt; Regex"},{"location":"0chops_bash/#-navigation","text":"which { package } # show address of version in use exec bash # restart shell printenv # show all env variables !histnum #run command from history chsh -s # change shell zsh bash etc","title":"-&gt; Navigation"},{"location":"0chops_bash/#-filesystem","text":"df # show disk files on machine whoami # display user name chmod mkdir { name } # makes a directory with a name mv # move files to new directory pwd # what is present working directory stat --help # lots of good stuff ps -Eafx:: # shows information about the current processes running in shell","title":"-&gt; Filesystem"},{"location":"0chops_bash/#-pipes","text":"# word count wc dip lays word -c, line -l, character -m, bytes -w cat less sort -n head -n { how many } { file } tail -n { num } { file } file name { * [ ab ] .* } \u2014\u2014> prints files with a or b in that position uniq { file } \u2014> removes adjacent duplicated lines cut \u2014> removes portions of lines from a file w \u2014> prints current user and what they are doing # wc all text files in current directory wc *.txt","title":"-&gt; Pipes"},{"location":"0chops_bash/#-loops","text":"need to review that # starts by expanding *.filetype for { x } in { *.filetype } ; do blah ; done ; # prints to output echo { text for anything to output } !! \u2014\u2014\u2014> last run command !$ \u2014\u2014\u2014\u2014> run last word of previous command","title":"-&gt; Loops"},{"location":"0chops_bash/#-scripts","text":"bash { script.sh } { $inputvar1 }","title":"-&gt; Scripts"},{"location":"0chops_bash/#-customizing","text":"# PS1 is the environment variable that contains the shell prompt. # '\\e[0;31m' is the terminal escape sequence to change color to red. # '\\u' is the user name # '\\h' is the host name # '\\W' is the current working directory # '\\e[m' means \"return to the default text color\" PS1 = \"\\e[0;32m\\h \\W\\:~ \\e[m \" #to yellow PS1 = \"\\e[0;33mjaja@ny-vid;~ \\e[m \" PS1 = \u2018 { what the prompt should be } \u2019 ex - $","title":"-&gt; Customizing"},{"location":"0chops_pandas_numpy/","text":"Numpy/Pandas Chops https://medium.com/better-programming/numpy-illustrated-the-visual-guide-to-numpy-3b1d4976de1d 0 df = pd . Dataframe ( data , index = , columns = ) df . sort_values ( '' , ascending = ToF ) pd . concat ( df1 , df2 ) df . rename ( columns = { 'x' : 'y' }) df . drop ( columns = [ '' , '' ])","title":"Numpy/Pandas Chops"},{"location":"0chops_pandas_numpy/#numpypandas-chops","text":"https://medium.com/better-programming/numpy-illustrated-the-visual-guide-to-numpy-3b1d4976de1d","title":"Numpy/Pandas Chops"},{"location":"0chops_pandas_numpy/#0","text":"df = pd . Dataframe ( data , index = , columns = ) df . sort_values ( '' , ascending = ToF ) pd . concat ( df1 , df2 ) df . rename ( columns = { 'x' : 'y' }) df . drop ( columns = [ '' , '' ])","title":"0"},{"location":"0chops_python3_pip/","text":"Python 3 Chops cheatsheat builtin functions -> Quick Reminders arrayname [:: - 1 ] # reverse, backwards zip ( * ARRAY ) # transpose array dir ( object ) # see all attributes [ ( do x ) for x in array if x == whatever ] lambda a , b : a + b -> Useful Libraries hashlib concurrent . futures argparse functools numba jit compile -> Pip on Ubuntu which pip pip show $PACKAGE pip install $PACKAGE --user -> Std Methods abs ( * int or * float ) ### return absolute value complex ( * int1 , * int2 ) ### return int1 + j*int2 divmod ( * int1 , * int2 ) ### return modular division and remainder floating point all ( * iterable ) ### return bool if all elements are true any ( * iterable ) ### return true if any element is true bool ( #[x]) ### standard truth telling procedure callable ( * object ) ### return true if object callable {ie class or instance} enumerate ( iterable , start = 0 ) ### range(iterable), object[] ascii ( object ) ### return readable string of ascii codes bin ( * int ) ### convert integer to binary '0bxxxxxxx' format hex () oct () bytearray () ### return new byte array lenght of int in brackets bytes () ### return byte word compile ( source , filename , mode , flags = 0 , dont_inherit = False , optimize =- 1 ) ### id ( object ) ### int value of id chr ( * int ) ### integer to unicode point equivalent del x .* attribute ### isinstance ( obj ) ### issubclass ( obj ) ### staticmethod () ### classmethod () ### return class method of function?? dir () ### list objects active in current sessionca eval ( * str ) ### execute variable name stored in passed in string exec () ### dynamic execution of python code, parse string as python statements help ( __builtin__ ) ### gives example of usage of python function globals () ### prints out contents of all global variables locals () ### input ( '' ) ### next line is read in as string, can store to variable -> Core Builtin Functions https://docs.python.org/3/library/functions.html open print compile eval eval ( * str ) exec input repr bytearray bytes vars dir format isinstance callable issubclass zip tuple // immutable seq objtype map sorted list filter frozenset set iter reversed slice len range enumerate breakpoint hash id next object bin oct hex int chr str ord ascii bool float complex dict divmod max min pow round all any @property getattr hasattr delattr type @staticmethod @classmethod super globals locals help","title":"Python 3 Chops"},{"location":"0chops_python3_pip/#python-3-chops","text":"cheatsheat builtin functions","title":"Python 3 Chops"},{"location":"0chops_python3_pip/#-quick-reminders","text":"arrayname [:: - 1 ] # reverse, backwards zip ( * ARRAY ) # transpose array dir ( object ) # see all attributes [ ( do x ) for x in array if x == whatever ] lambda a , b : a + b","title":"-&gt; Quick Reminders"},{"location":"0chops_python3_pip/#-useful-libraries","text":"hashlib concurrent . futures argparse functools numba jit compile","title":"-&gt; Useful Libraries"},{"location":"0chops_python3_pip/#-pip-on-ubuntu","text":"which pip pip show $PACKAGE pip install $PACKAGE --user","title":"-&gt; Pip on Ubuntu"},{"location":"0chops_python3_pip/#-std-methods","text":"abs ( * int or * float ) ### return absolute value complex ( * int1 , * int2 ) ### return int1 + j*int2 divmod ( * int1 , * int2 ) ### return modular division and remainder floating point all ( * iterable ) ### return bool if all elements are true any ( * iterable ) ### return true if any element is true bool ( #[x]) ### standard truth telling procedure callable ( * object ) ### return true if object callable {ie class or instance} enumerate ( iterable , start = 0 ) ### range(iterable), object[] ascii ( object ) ### return readable string of ascii codes bin ( * int ) ### convert integer to binary '0bxxxxxxx' format hex () oct () bytearray () ### return new byte array lenght of int in brackets bytes () ### return byte word compile ( source , filename , mode , flags = 0 , dont_inherit = False , optimize =- 1 ) ### id ( object ) ### int value of id chr ( * int ) ### integer to unicode point equivalent del x .* attribute ### isinstance ( obj ) ### issubclass ( obj ) ### staticmethod () ### classmethod () ### return class method of function?? dir () ### list objects active in current sessionca eval ( * str ) ### execute variable name stored in passed in string exec () ### dynamic execution of python code, parse string as python statements help ( __builtin__ ) ### gives example of usage of python function globals () ### prints out contents of all global variables locals () ### input ( '' ) ### next line is read in as string, can store to variable","title":"-&gt; Std Methods"},{"location":"0chops_python3_pip/#-core-builtin-functions","text":"https://docs.python.org/3/library/functions.html open print compile eval eval ( * str ) exec input repr bytearray bytes vars dir format isinstance callable issubclass zip tuple // immutable seq objtype map sorted list filter frozenset set iter reversed slice len range enumerate breakpoint hash id next object bin oct hex int chr str ord ascii bool float complex dict divmod max min pow round all any @property getattr hasattr delattr type @staticmethod @classmethod super globals locals help","title":"-&gt; Core Builtin Functions"},{"location":"1chops_ubuntu/","text":"Ubuntu Chops index -> Screenshots PrtSc \u2013 Save a screenshot of the entire screen to the \u201cPictures\u201d directory. Shift + PrtSc \u2013 Save a screenshot of a specific region to Pictures. Alt + PrtSc \u2013 Save a screenshot of the current window to Pictures. Ctrl + PrtSc \u2013 Copy the screenshot of the entire screen to the clipboard. Shift + Ctrl + PrtSc \u2013 Copy the screenshot of a specific region to the clipboard. Ctrl + Alt + PrtSc \u2013 Copy the screenshot of the current window to the clipboard. -> File conversion # convert xlsx to csv for i in *.xlsx ; do libreoffice --headless --convert-to csv \" $i \" ; done -> Root Directories /etc/systemd/* # https://systemd.io/ boot, service mgmt, stat # inode -> Networking netstat -tunlp ss -tunlp nmcli wget curl ping ifconfig ### difficulties? connecting to unsecured wifi networks with login pages (ie airport, coffeeshop) sudo service network-manager restart ip route systemd-resolve --status iwconfig # check wifi speed /etc/resolv.conf # check the dns of a page if your phone connects to and then add it to you file ahead of 8.8.8.8 or your normal dns -> Permissions chown # octal {rwx rwx rwx} represents permissions for { owner group other } #### credit https://linuxize.com/post/chmod-command-in-linux/ -rw-r--r-- 12 linuxize users 12 .0K Apr 8 20 :51 filename.txt | [ - ][ - ][ - ] - [ ------ ] [ --- ] | | | | | | | | | | | | | +-----------> 7 . Group | | | | | +-------------------> 6 . Owner | | | | +--------------------------> 5 . Alternate Access Method | | | +----------------------------> 4 . Others Permissions | | +-------------------------------> 3 . Group Permissions | +----------------------------------> 2 . Owner Permissions +------------------------------------> 1 . File Type #### chmod chgrp -> Packages type PACKAGE #shows install path apt-cache policy PACKAGE apt-get # ppa-purge aptitude -> Memory, Disk Space, Partition, Hibernation, RAM, Swap Gparted is a gui for partitions, but you need a bootable usb to edit the partition that the OS is on https://tldp.org/HOWTO/Partition/index.html -> Outline fdisk df ds ps conky sudo blkid -> Hibernation Issues systemctl hibernate cd /sys/power man busctl swapon --show sudo swapon /dev/sda2 # example of adding partition sudo nano/etc/fstab swapoff cat /proc/swaps cat /etc/initramfs-tools/conf.d/resume cat /etc/fstab lsblk sudo blkid #other dd # Copy a file, converting and formatting according to the operands. fdisk -l # Display or manipulate a disk partition table. -> Standard Output, Filesystem Navigation/Edit cat head tail echo tree move mv copy cp touch remove rm mkdir # make directory -> Config files .bashrc .bashprofile .zsh .profile -> Environment env -> Command Line Tools ranger --- explorer / finder in ncdu --- shows size of all files sorted navigate with arrow keys jq --- cli for editing json inxi -Fxz ---- show system profile, cpu, battery, hardware descriptions -> Index useful cli utilies network | wifi packages | apt-get | ppa sound","title":"Ubuntu Chops"},{"location":"1chops_ubuntu/#ubuntu-chops","text":"index","title":"Ubuntu Chops"},{"location":"1chops_ubuntu/#-screenshots","text":"PrtSc \u2013 Save a screenshot of the entire screen to the \u201cPictures\u201d directory. Shift + PrtSc \u2013 Save a screenshot of a specific region to Pictures. Alt + PrtSc \u2013 Save a screenshot of the current window to Pictures. Ctrl + PrtSc \u2013 Copy the screenshot of the entire screen to the clipboard. Shift + Ctrl + PrtSc \u2013 Copy the screenshot of a specific region to the clipboard. Ctrl + Alt + PrtSc \u2013 Copy the screenshot of the current window to the clipboard.","title":"-&gt; Screenshots"},{"location":"1chops_ubuntu/#-file-conversion","text":"# convert xlsx to csv for i in *.xlsx ; do libreoffice --headless --convert-to csv \" $i \" ; done","title":"-&gt; File conversion"},{"location":"1chops_ubuntu/#-root-directories","text":"/etc/systemd/* # https://systemd.io/ boot, service mgmt, stat # inode","title":"-&gt; Root Directories"},{"location":"1chops_ubuntu/#-networking","text":"netstat -tunlp ss -tunlp nmcli wget curl ping ifconfig ### difficulties? connecting to unsecured wifi networks with login pages (ie airport, coffeeshop) sudo service network-manager restart ip route systemd-resolve --status iwconfig # check wifi speed /etc/resolv.conf # check the dns of a page if your phone connects to and then add it to you file ahead of 8.8.8.8 or your normal dns","title":"-&gt; Networking"},{"location":"1chops_ubuntu/#-permissions","text":"chown # octal {rwx rwx rwx} represents permissions for { owner group other } #### credit https://linuxize.com/post/chmod-command-in-linux/ -rw-r--r-- 12 linuxize users 12 .0K Apr 8 20 :51 filename.txt | [ - ][ - ][ - ] - [ ------ ] [ --- ] | | | | | | | | | | | | | +-----------> 7 . Group | | | | | +-------------------> 6 . Owner | | | | +--------------------------> 5 . Alternate Access Method | | | +----------------------------> 4 . Others Permissions | | +-------------------------------> 3 . Group Permissions | +----------------------------------> 2 . Owner Permissions +------------------------------------> 1 . File Type #### chmod chgrp","title":"-&gt; Permissions"},{"location":"1chops_ubuntu/#-packages","text":"type PACKAGE #shows install path apt-cache policy PACKAGE apt-get # ppa-purge aptitude","title":"-&gt; Packages"},{"location":"1chops_ubuntu/#-memory-disk-space-partition-hibernation-ram-swap","text":"Gparted is a gui for partitions, but you need a bootable usb to edit the partition that the OS is on https://tldp.org/HOWTO/Partition/index.html","title":"-&gt; Memory, Disk Space, Partition, Hibernation, RAM, Swap"},{"location":"1chops_ubuntu/#-outline","text":"fdisk df ds ps conky sudo blkid","title":"-&gt; Outline"},{"location":"1chops_ubuntu/#-hibernation-issues","text":"systemctl hibernate cd /sys/power man busctl swapon --show sudo swapon /dev/sda2 # example of adding partition sudo nano/etc/fstab swapoff cat /proc/swaps cat /etc/initramfs-tools/conf.d/resume cat /etc/fstab lsblk sudo blkid #other dd # Copy a file, converting and formatting according to the operands. fdisk -l # Display or manipulate a disk partition table.","title":"-&gt; Hibernation Issues"},{"location":"1chops_ubuntu/#-standard-output-filesystem-navigationedit","text":"cat head tail echo tree move mv copy cp touch remove rm mkdir # make directory","title":"-&gt; Standard Output, Filesystem Navigation/Edit"},{"location":"1chops_ubuntu/#-config-files","text":".bashrc .bashprofile .zsh .profile","title":"-&gt; Config files"},{"location":"1chops_ubuntu/#-environment","text":"env","title":"-&gt; Environment"},{"location":"1chops_ubuntu/#-command-line-tools","text":"ranger --- explorer / finder in ncdu --- shows size of all files sorted navigate with arrow keys jq --- cli for editing json inxi -Fxz ---- show system profile, cpu, battery, hardware descriptions","title":"-&gt; Command Line Tools"},{"location":"1chops_ubuntu/#-index","text":"useful cli utilies network | wifi packages | apt-get | ppa sound","title":"-&gt; Index"},{"location":"2chops_git/","text":"Git Chops -> Create / Initialize git init # or git clone https://github.com/xxxxxx -> Merging Branching git merge dev --allow-unrelated-histories git checkout -b $newbranch # get a new branch and switch to it git checkout -b $branchname_a / $branchname_b # get a local copy of a remote existing branch git checkout $branchname # switch branch git checkout --orphan $branchname # create branch without full history -> local push to existing remote touch README.md git init git add . git commit -m \"message\" git remote add origin https://github.com/user/nameofgit.git git pull origin master -v --allow-unrelated-histories // or git pull <remote> master:dev git push -u origin master -> summary of changes git log -n $num -p # $num:int recent commit diffs git log __branchA__ ^__branchB__ # commit diff btw branch A and B git log --pretty = oneline --stat --all __foldername__ # modified files under a given folder git fetch git pull origin __branchname__ git merge --no-ff __sourcebranch__ # merge into current branch source one without rebase/FF git push origin __destinationbranch__ # push merges/changesets to a branch # display the path of the repository git remote show origin # Change remote URI to xxx git remote set-url origin xxx -> undo changes git status # show status of uncommited files # revert a file git checkout __file__ # Checkout all changes to **file** from branch **branchname** into current git checkout __branchname__ __file__ # revert a full branch to specified revision if not commited git checkout __revision__ . # Reverts certain commits if commited git revert __commit1__ __commit2__ ... # revert a full branch to specified revision if commited git reset __revision__ . # remove all local uncommited modifications git clean -f # display local branches, active one is with a \\* git branch # Show changes in files git diff # show a diff between a local branch and a remote one git diff __branch__ origin/__remotebranch__ # rebases current branch with specified branch (fetches remote branch changes and then adds yurs at the tip) git rebase __branchname__ # delete a file from branch and filesystem git rm __filename__ # delete a local branch git branch -d __branchname__ # delete a remote brach git push origin --delete __branchname__ # show visual git log gitk __filename__ -> set config vars # reset to last commit (even if pushed). Can re-commit stuff but if already pushed will need t push with `--force`. git reset --soft HEAD~1 # squash all branch pushed commits previous to the one specified into a single commit with the dsired new message. git reset --soft <new-root-sha1> && git commit --amend -m \"<new message>\" && git push --force # Show diff between local commits and remote commits git log origin/__branchname__..__branchname__ # List currently setup config values git config --list # Setup global user name git config --global user.name \"Kartones\" # Setup global user email git config --global user.email \"d...@....net\" # Make git cache credentials for 8 hours git config --global credential.helper 'cache --timeout=28800' # Activate colors in diffs, etc. git config --global color.ui true # Fix Convert newlines to Unix-style ones (**Windows**) git config --global core.autocrlf true # Fix Convert newlines to Unix-style ones (**Unix**)\\* git config --global core.autocrlf input # Better diff highlighting (same for 3 following options) git config --global pager.log 'diff-highlight | less' git config --global pager.show 'diff-highlight | less' git config --global pager.diff 'diff-highlight | less' git config --global interactive.diffFilter diff-highlight # Init and update all submodules git submodule update --init --recursive # Retrieve and update all submodules (alt) git submodule init && git submodule update rm -Rf **submoduledir** git reset && git checkout . git checkout __branchname__ //help.github.com/articles/merging-a-pull-request ) git pull https://github.com/__username__/__reponame__.git __branchname__: [ Merge a pull request to local branch ]( https //git-scm.com/book/en/Git-Tools-Stashing ) current changes git stash: [ Stash ]( http # Unstash and merge stored changes git stash apply # Keep changes from incoming branch or local one, respectively. git checkout --theirs xxxx git checkout --ours xxxx # Blames original commit, not the move commit git blame -M # Looks at all commits in history git blame -CCC # merges and commits a specific commit to current branch git cherry-pick __commit__ # show all changes on all branches and revert to a specific one git reflog git reset HEAD@__commit__ # Squash a change on previous commit and change the commit message git commit --amend # Show both staged and unstaged changes that you will commit git diff --staged # Undo a commit removing it from history git reset --hard HEAD~1 git push origin <branch> --force # Tag any commit of a repo (e.g. with a certain version): git tag <label> <commit-id> git push origin <label> -> Resources tig : to navigate commits & branches github help page on licensing Atlassian Git tutorial Git Cookbook Most Common Git tips & tricks (awesome list)","title":"Git Chops"},{"location":"2chops_git/#git-chops","text":"","title":"Git Chops"},{"location":"2chops_git/#-create-initialize","text":"git init # or git clone https://github.com/xxxxxx","title":"-&gt; Create / Initialize"},{"location":"2chops_git/#-merging-branching","text":"git merge dev --allow-unrelated-histories git checkout -b $newbranch # get a new branch and switch to it git checkout -b $branchname_a / $branchname_b # get a local copy of a remote existing branch git checkout $branchname # switch branch git checkout --orphan $branchname # create branch without full history","title":"-&gt; Merging Branching"},{"location":"2chops_git/#-local-push-to-existing-remote","text":"touch README.md git init git add . git commit -m \"message\" git remote add origin https://github.com/user/nameofgit.git git pull origin master -v --allow-unrelated-histories // or git pull <remote> master:dev git push -u origin master","title":"-&gt; local push to existing remote"},{"location":"2chops_git/#-summary-of-changes","text":"git log -n $num -p # $num:int recent commit diffs git log __branchA__ ^__branchB__ # commit diff btw branch A and B git log --pretty = oneline --stat --all __foldername__ # modified files under a given folder git fetch git pull origin __branchname__ git merge --no-ff __sourcebranch__ # merge into current branch source one without rebase/FF git push origin __destinationbranch__ # push merges/changesets to a branch # display the path of the repository git remote show origin # Change remote URI to xxx git remote set-url origin xxx","title":"-&gt; summary of changes"},{"location":"2chops_git/#-undo-changes","text":"git status # show status of uncommited files # revert a file git checkout __file__ # Checkout all changes to **file** from branch **branchname** into current git checkout __branchname__ __file__ # revert a full branch to specified revision if not commited git checkout __revision__ . # Reverts certain commits if commited git revert __commit1__ __commit2__ ... # revert a full branch to specified revision if commited git reset __revision__ . # remove all local uncommited modifications git clean -f # display local branches, active one is with a \\* git branch # Show changes in files git diff # show a diff between a local branch and a remote one git diff __branch__ origin/__remotebranch__ # rebases current branch with specified branch (fetches remote branch changes and then adds yurs at the tip) git rebase __branchname__ # delete a file from branch and filesystem git rm __filename__ # delete a local branch git branch -d __branchname__ # delete a remote brach git push origin --delete __branchname__ # show visual git log gitk __filename__","title":"-&gt; undo changes"},{"location":"2chops_git/#-set-config-vars","text":"# reset to last commit (even if pushed). Can re-commit stuff but if already pushed will need t push with `--force`. git reset --soft HEAD~1 # squash all branch pushed commits previous to the one specified into a single commit with the dsired new message. git reset --soft <new-root-sha1> && git commit --amend -m \"<new message>\" && git push --force # Show diff between local commits and remote commits git log origin/__branchname__..__branchname__ # List currently setup config values git config --list # Setup global user name git config --global user.name \"Kartones\" # Setup global user email git config --global user.email \"d...@....net\" # Make git cache credentials for 8 hours git config --global credential.helper 'cache --timeout=28800' # Activate colors in diffs, etc. git config --global color.ui true # Fix Convert newlines to Unix-style ones (**Windows**) git config --global core.autocrlf true # Fix Convert newlines to Unix-style ones (**Unix**)\\* git config --global core.autocrlf input # Better diff highlighting (same for 3 following options) git config --global pager.log 'diff-highlight | less' git config --global pager.show 'diff-highlight | less' git config --global pager.diff 'diff-highlight | less' git config --global interactive.diffFilter diff-highlight # Init and update all submodules git submodule update --init --recursive # Retrieve and update all submodules (alt) git submodule init && git submodule update rm -Rf **submoduledir** git reset && git checkout . git checkout __branchname__ //help.github.com/articles/merging-a-pull-request ) git pull https://github.com/__username__/__reponame__.git __branchname__: [ Merge a pull request to local branch ]( https //git-scm.com/book/en/Git-Tools-Stashing ) current changes git stash: [ Stash ]( http # Unstash and merge stored changes git stash apply # Keep changes from incoming branch or local one, respectively. git checkout --theirs xxxx git checkout --ours xxxx # Blames original commit, not the move commit git blame -M # Looks at all commits in history git blame -CCC # merges and commits a specific commit to current branch git cherry-pick __commit__ # show all changes on all branches and revert to a specific one git reflog git reset HEAD@__commit__ # Squash a change on previous commit and change the commit message git commit --amend # Show both staged and unstaged changes that you will commit git diff --staged # Undo a commit removing it from history git reset --hard HEAD~1 git push origin <branch> --force # Tag any commit of a repo (e.g. with a certain version): git tag <label> <commit-id> git push origin <label>","title":"-&gt; set config vars"},{"location":"2chops_git/#-resources","text":"tig : to navigate commits & branches github help page on licensing Atlassian Git tutorial Git Cookbook Most Common Git tips & tricks (awesome list)","title":"-&gt; Resources"},{"location":"2chops_markdown/","text":"Markdown Chops mkdocs proj documentation -> Images, Pictures, jpeg, svg, png ![GitHub Logo](/images/logo.png) Format: ![Alt Text](url) -> Preview, local, write, test, lazy reload, auto-reload in vscode \"ctrl+v k\" to preview in new tab split side-by-side ---- ref [grip github link] (https://github.com/joeyespo/grip) \\ pip install --user grip grip FILENAME.md #defaults to README.md in current directory -> line breaks, bold, italic, color, font size, font type, </ br > or \\ line breaks # h1 (with space after #) ## h2 ###### h6 -> List, index, items, ordered, bullets, points, numbers * list * ex * indent with tab * extra indent - [x] x it dawg - [ ] item up next - [x] @mentions , #refs , [links](), **formatting** , and <del>tags</del> supported - [ ] list syntax required (any unordered or ordered * list * above * indent with tab - [x] this is a complete item - [ ] this is an incomplete item - [x] @mentions , #refs , [links](), **formatting** , and <del>tags</del> supported - [x] list syntax required (any unordered or ordered -> Links http://github.com - automatic! [GitHub](http://github.com) -> Codeblocks ```python3 def iluv (you): who = you besties = you return besties ```. (start three backticks and language ex -> ```bash) (end ``` and no mas, without . from 2 lines above) -> GitHub supports emoji! :+1: :sparkles: :camel: :tada: \\ :rocket: :metal: :octocat: :+1: :sparkles: :camel: :tada: :rocket: :metal: :octocat: Write!","title":"Markdown Chops"},{"location":"2chops_markdown/#markdown-chops","text":"mkdocs proj documentation","title":"Markdown Chops"},{"location":"2chops_markdown/#-images-pictures-jpeg-svg-png","text":"![GitHub Logo](/images/logo.png) Format: ![Alt Text](url)","title":"-&gt; Images, Pictures, jpeg, svg, png"},{"location":"2chops_markdown/#-preview-local-write-test-lazy-reload-auto-reload","text":"in vscode \"ctrl+v k\" to preview in new tab split side-by-side ---- ref [grip github link] (https://github.com/joeyespo/grip) \\ pip install --user grip grip FILENAME.md #defaults to README.md in current directory","title":"-&gt; Preview, local, write, test, lazy reload, auto-reload"},{"location":"2chops_markdown/#-line-breaks-bold-italic-color-font-size-font-type","text":"</ br > or \\ line breaks # h1 (with space after #) ## h2 ###### h6","title":"-&gt; line breaks, bold, italic, color, font size, font type,"},{"location":"2chops_markdown/#-list-index-items-ordered-bullets-points-numbers","text":"* list * ex * indent with tab * extra indent - [x] x it dawg - [ ] item up next - [x] @mentions , #refs , [links](), **formatting** , and <del>tags</del> supported - [ ] list syntax required (any unordered or ordered * list * above * indent with tab - [x] this is a complete item - [ ] this is an incomplete item - [x] @mentions , #refs , [links](), **formatting** , and <del>tags</del> supported - [x] list syntax required (any unordered or ordered","title":"-&gt; List, index, items, ordered, bullets, points, numbers"},{"location":"2chops_markdown/#-links","text":"http://github.com - automatic! [GitHub](http://github.com)","title":"-&gt; Links"},{"location":"2chops_markdown/#-codeblocks","text":"```python3 def iluv (you): who = you besties = you return besties ```. (start three backticks and language ex -> ```bash) (end ``` and no mas, without . from 2 lines above)","title":"-&gt; Codeblocks"},{"location":"2chops_markdown/#-github-supports-emoji","text":":+1: :sparkles: :camel: :tada: \\ :rocket: :metal: :octocat: :+1: :sparkles: :camel: :tada: :rocket: :metal: :octocat: Write!","title":"-&gt; GitHub supports emoji!"},{"location":"2chops_vscode/","text":"VSCode Chops -> Key Shortcuts ctrl-l # highlight line ctrl-k + ctrl-r # open vscode keyboard shortcut helpsheet shift+ctrl+p # open command to search shift+ctrl+{up or down} # add second cursor, esc to deselect ctrl + shift + k # delete current line ctrl+k v # preview to right -> settings.json \"python.linting.pylintEnabled\": true, \"python.linting.enabled\": true","title":"VSCode Chops"},{"location":"2chops_vscode/#vscode-chops","text":"","title":"VSCode Chops"},{"location":"2chops_vscode/#-key-shortcuts","text":"ctrl-l # highlight line ctrl-k + ctrl-r # open vscode keyboard shortcut helpsheet shift+ctrl+p # open command to search shift+ctrl+{up or down} # add second cursor, esc to deselect ctrl + shift + k # delete current line ctrl+k v # preview to right","title":"-&gt; Key Shortcuts"},{"location":"2chops_vscode/#-settingsjson","text":"\"python.linting.pylintEnabled\": true, \"python.linting.enabled\": true","title":"-&gt; settings.json"}]}