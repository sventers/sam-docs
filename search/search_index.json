{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . https://dev.to/ar2pi/publish-your-markdown-docs-on-github-pages-6pe Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org . https://dev.to/ar2pi/publish-your-markdown-docs-on-github-pages-6pe","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"chops_git/","text":"Git Chops there is a lot of good stuff still needs to be sorted double check everything before execute index: - create - merging/branching -> Create / Initialize git init # or git clone https://github.com/xxxxxx -> Merging Branching git merge dev --allow-unrelated-histories git checkout -b $newbranch # get a new branch and switch to it git checkout -b $branchname_a/$branchname_b # get a local copy of a remote existing branch git checkout $branchname # switch branch git checkout --orphan $branchname # create branch without full history -> add local git to existing github rep touch README.md git init git add . git commit -m \"message\" git remote add origin https://github.com/user/nameofgit.git git pull origin master -v --allow-unrelated-histories // or git pull <remote> master:dev git push -u origin master # show X last commits with diffs git log -n X -p # commits in branch A that arent in branch B git log __branchA__ ^__branchB__ # modified files under a given folder git log --pretty=oneline --stat --all __foldername__ git fetch git pull origin __branchname__ # merge into current branch source one without rebase/FF git merge --no-ff __sourcebranch__ # push merges/changesets to a branch git push origin __destinationbranch__ # display the path of the repository git remote show origin # Change remote URI to xxx git remote set-url origin xxx # Remove remote URI git remote rm origin # Add remote URI (for example after adding SSH key with `ssh-add ~/.ssh/id_rsa`). Must first `it remote rm origin` to remove previous one. git remote add origin git@github.com:CartoDB/cartodb.js.git # add files (use . for everything, **folder**/.. for folder recursive children) git add xxx # commit changes git commit # show status of uncommited files git status # revert a file git checkout __file__ # Checkout all changes to **file** from branch **branchname** into current git checkout __branchname__ __file__ # revert a full branch to specified revision if not commited git checkout __revision__ . # Reverts certain commits if commited git revert __commit1__ __commit2__ ... # revert a full branch to specified revision if commited git reset __revision__ . # remove all local uncommited modifications git clean -f # display local branches, active one is with a \\* git branch # Show changes in files git diff # show a diff between a local branch and a remote one git diff __branch__ origin/__remotebranch__ # rebases current branch with specified branch (fetches remote branch changes and then adds yurs at the tip) git rebase __branchname__ # delete a file from branch and filesystem git rm __filename__ # delete a local branch git branch -d __branchname__ # delete a remote brach git push origin --delete __branchname__ # show visual git log gitk __filename__ # reset to last commit (even if pushed). Can re-commit stuff but if already pushed will need t push with `--force`. git reset --soft HEAD~1 # squash all branch pushed commits previous to the one specified into a single commit with the dsired new message. git reset --soft <new-root-sha1> && git commit --amend -m \"<new message>\" && git push --force # Show diff between local commits and remote commits git log origin/__branchname__..__branchname__ # List currently setup config values git config --list # Setup global user name git config --global user.name \"Kartones\" # Setup global user email git config --global user.email \"d...@....net\" # Make git cache credentials for 8 hours git config --global credential.helper 'cache --timeout=28800' # Activate colors in diffs, etc. git config --global color.ui true # Fix Convert newlines to Unix-style ones (**Windows**) git config --global core.autocrlf true # Fix Convert newlines to Unix-style ones (**Unix**)\\* git config --global core.autocrlf input # Better diff highlighting (same for 3 following options) git config --global pager.log 'diff-highlight | less' git config --global pager.show 'diff-highlight | less' git config --global pager.diff 'diff-highlight | less' git config --global interactive.diffFilter diff-highlight # Init and update all submodules git submodule update --init --recursive # Retrieve and update all submodules (alt) git submodule init && git submodule update rm -Rf **submoduledir** git reset && git checkout . git checkout __branchname__ //help.github.com/articles/merging-a-pull-request) git pull https://github.com/__username__/__reponame__.git __branchname__: [Merge a pull request to local branch](https //git-scm.com/book/en/Git-Tools-Stashing) current changes git stash: [Stash](http # Unstash and merge stored changes git stash apply # Keep changes from incoming branch or local one, respectively. git checkout --theirs xxxx git checkout --ours xxxx # Blames original commit, not the move commit git blame -M # Looks at all commits in history git blame -CCC # merges and commits a specific commit to current branch git cherry-pick __commit__ # show all changes on all branches and revert to a specific one git reflog git reset HEAD@__commit__ # Squash a change on previous commit and change the commit message git commit --amend # Show both staged and unstaged changes that you will commit git diff --staged # Undo a commit removing it from history git reset --hard HEAD~1 git push origin <branch> --force # Tag any commit of a repo (e.g. with a certain version): git tag <label> <commit-id> git push origin <label> -> Random tig : to navigate commits & branches github help page on licensing Atlassian Git tutorial Git Cookbook Most Common Git tips & tricks (awesome list)","title":"Git Chops"},{"location":"chops_git/#git-chops","text":"there is a lot of good stuff still needs to be sorted double check everything before execute index: - create - merging/branching","title":"Git Chops"},{"location":"chops_git/#-create-initialize","text":"git init # or git clone https://github.com/xxxxxx","title":"-&gt; Create / Initialize"},{"location":"chops_git/#-merging-branching","text":"git merge dev --allow-unrelated-histories git checkout -b $newbranch # get a new branch and switch to it git checkout -b $branchname_a/$branchname_b # get a local copy of a remote existing branch git checkout $branchname # switch branch git checkout --orphan $branchname # create branch without full history","title":"-&gt; Merging Branching"},{"location":"chops_git/#-add-local-git-to-existing-github-rep","text":"touch README.md git init git add . git commit -m \"message\" git remote add origin https://github.com/user/nameofgit.git git pull origin master -v --allow-unrelated-histories // or git pull <remote> master:dev git push -u origin master # show X last commits with diffs git log -n X -p # commits in branch A that arent in branch B git log __branchA__ ^__branchB__ # modified files under a given folder git log --pretty=oneline --stat --all __foldername__ git fetch git pull origin __branchname__ # merge into current branch source one without rebase/FF git merge --no-ff __sourcebranch__ # push merges/changesets to a branch git push origin __destinationbranch__ # display the path of the repository git remote show origin # Change remote URI to xxx git remote set-url origin xxx # Remove remote URI git remote rm origin # Add remote URI (for example after adding SSH key with `ssh-add ~/.ssh/id_rsa`). Must first `it remote rm origin` to remove previous one. git remote add origin git@github.com:CartoDB/cartodb.js.git # add files (use . for everything, **folder**/.. for folder recursive children) git add xxx # commit changes git commit # show status of uncommited files git status # revert a file git checkout __file__ # Checkout all changes to **file** from branch **branchname** into current git checkout __branchname__ __file__ # revert a full branch to specified revision if not commited git checkout __revision__ . # Reverts certain commits if commited git revert __commit1__ __commit2__ ... # revert a full branch to specified revision if commited git reset __revision__ . # remove all local uncommited modifications git clean -f # display local branches, active one is with a \\* git branch # Show changes in files git diff # show a diff between a local branch and a remote one git diff __branch__ origin/__remotebranch__ # rebases current branch with specified branch (fetches remote branch changes and then adds yurs at the tip) git rebase __branchname__ # delete a file from branch and filesystem git rm __filename__ # delete a local branch git branch -d __branchname__ # delete a remote brach git push origin --delete __branchname__ # show visual git log gitk __filename__ # reset to last commit (even if pushed). Can re-commit stuff but if already pushed will need t push with `--force`. git reset --soft HEAD~1 # squash all branch pushed commits previous to the one specified into a single commit with the dsired new message. git reset --soft <new-root-sha1> && git commit --amend -m \"<new message>\" && git push --force # Show diff between local commits and remote commits git log origin/__branchname__..__branchname__ # List currently setup config values git config --list # Setup global user name git config --global user.name \"Kartones\" # Setup global user email git config --global user.email \"d...@....net\" # Make git cache credentials for 8 hours git config --global credential.helper 'cache --timeout=28800' # Activate colors in diffs, etc. git config --global color.ui true # Fix Convert newlines to Unix-style ones (**Windows**) git config --global core.autocrlf true # Fix Convert newlines to Unix-style ones (**Unix**)\\* git config --global core.autocrlf input # Better diff highlighting (same for 3 following options) git config --global pager.log 'diff-highlight | less' git config --global pager.show 'diff-highlight | less' git config --global pager.diff 'diff-highlight | less' git config --global interactive.diffFilter diff-highlight # Init and update all submodules git submodule update --init --recursive # Retrieve and update all submodules (alt) git submodule init && git submodule update rm -Rf **submoduledir** git reset && git checkout . git checkout __branchname__ //help.github.com/articles/merging-a-pull-request) git pull https://github.com/__username__/__reponame__.git __branchname__: [Merge a pull request to local branch](https //git-scm.com/book/en/Git-Tools-Stashing) current changes git stash: [Stash](http # Unstash and merge stored changes git stash apply # Keep changes from incoming branch or local one, respectively. git checkout --theirs xxxx git checkout --ours xxxx # Blames original commit, not the move commit git blame -M # Looks at all commits in history git blame -CCC # merges and commits a specific commit to current branch git cherry-pick __commit__ # show all changes on all branches and revert to a specific one git reflog git reset HEAD@__commit__ # Squash a change on previous commit and change the commit message git commit --amend # Show both staged and unstaged changes that you will commit git diff --staged # Undo a commit removing it from history git reset --hard HEAD~1 git push origin <branch> --force # Tag any commit of a repo (e.g. with a certain version): git tag <label> <commit-id> git push origin <label>","title":"-&gt; add local git to existing github rep"},{"location":"chops_git/#-random","text":"tig : to navigate commits & branches github help page on licensing Atlassian Git tutorial Git Cookbook Most Common Git tips & tricks (awesome list)","title":"-&gt; Random"},{"location":"chops_markdown/","text":"Markdown Chops mkdocs proj documentation Images, Pictures, jpeg, svg, png ![GitHub Logo](/images/logo.png) Format: ![Alt Text](url) Preview, local, write, test, lazy reload, auto-reload in vscode \"ctrl+v k\" to preview in new tab split side-by-side ---- ref [grip github link] (https://github.com/joeyespo/grip) \\ pip install --user grip grip FILENAME.md #defaults to README.md in current directory line breaks, bold, italic, color, font size, font type, </br> or \\ line breaks # h1 (with space after #) ## h2 ###### h6 List, index, items, ordered, bullets, points, numbers * list * ex * indent with tab * extra indent - [x] x it dawg - [ ] item up next - [x] @mentions, #refs, [links](), **formatting**, and <del>tags</del> supported - [ ] list syntax required (any unordered or ordered * list * above * indent with tab - [x] this is a complete item - [ ] this is an incomplete item - [x] @mentions, #refs, [links](), **formatting**, and <del>tags</del> supported - [x] list syntax required (any unordered or ordered Links http://github.com - automatic! [GitHub](http://github.com) Codeblocks ```python3 def iluv (you): who = you besties = you return besties ```. (start three backticks and language ex -> ```bash) (end ``` and no mas, without . from 2 lines above) GitHub supports emoji! :+1: :sparkles: :camel: :tada: \\ :rocket: :metal: :octocat: :+1: :sparkles: :camel: :tada: :rocket: :metal: :octocat: Write!","title":"Markdown Chops"},{"location":"chops_markdown/#markdown-chops","text":"mkdocs proj documentation","title":"Markdown Chops"},{"location":"chops_markdown/#images-pictures-jpeg-svg-png","text":"![GitHub Logo](/images/logo.png) Format: ![Alt Text](url)","title":"Images, Pictures, jpeg, svg, png"},{"location":"chops_markdown/#preview-local-write-test-lazy-reload-auto-reload","text":"in vscode \"ctrl+v k\" to preview in new tab split side-by-side ---- ref [grip github link] (https://github.com/joeyespo/grip) \\ pip install --user grip grip FILENAME.md #defaults to README.md in current directory","title":"Preview, local, write, test, lazy reload, auto-reload"},{"location":"chops_markdown/#line-breaks-bold-italic-color-font-size-font-type","text":"</br> or \\ line breaks # h1 (with space after #) ## h2 ###### h6","title":"line breaks, bold, italic, color, font size, font type,"},{"location":"chops_markdown/#list-index-items-ordered-bullets-points-numbers","text":"* list * ex * indent with tab * extra indent - [x] x it dawg - [ ] item up next - [x] @mentions, #refs, [links](), **formatting**, and <del>tags</del> supported - [ ] list syntax required (any unordered or ordered * list * above * indent with tab - [x] this is a complete item - [ ] this is an incomplete item - [x] @mentions, #refs, [links](), **formatting**, and <del>tags</del> supported - [x] list syntax required (any unordered or ordered","title":"List, index, items, ordered, bullets, points, numbers"},{"location":"chops_markdown/#links","text":"http://github.com - automatic! [GitHub](http://github.com)","title":"Links"},{"location":"chops_markdown/#codeblocks","text":"```python3 def iluv (you): who = you besties = you return besties ```. (start three backticks and language ex -> ```bash) (end ``` and no mas, without . from 2 lines above)","title":"Codeblocks"},{"location":"chops_markdown/#github-supports-emoji","text":":+1: :sparkles: :camel: :tada: \\ :rocket: :metal: :octocat: :+1: :sparkles: :camel: :tada: :rocket: :metal: :octocat: Write!","title":"GitHub supports emoji!"}]}