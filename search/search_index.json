{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About This is a place to store links to stackoverflow links to other coding toolbox aggregators reusable code snippets Built with mkdocs Aspiring to update on Sundays","title":"About"},{"location":"#about","text":"This is a place to store links to stackoverflow links to other coding toolbox aggregators reusable code snippets Built with mkdocs Aspiring to update on Sundays","title":"About"},{"location":"bash/","text":"Bash https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html grep find sed awk # look through current directory's hieracrhy for text in file grep -rnw '/path/to/somewhere/' -e 'pattern' # recursively delete all files of a single extension find . -name \"*.bak\" -type f -delete # recursive print all file with extension .py find $directory -type f -name \"*.in\" find ./ -name '*article*' | xargs -I '{}' mv {} ../backup find ./ -name '*article*' | xargs mv -t ../backup i/o & operators wc # wordcount cat less sort -n head -n { how many } { file } tail -n { num } { file } file name { * [ ab ] .* } \u2014\u2014> prints files with a or b in that position uniq { file } \u2014> removes adjacent duplicated lines cut \u2014> removes portions of lines from a file w \u2014> prints current user and what they are doing # wc all text files in current directory wc *.txt A ; B # Run A and then B, regardless of success of A A && B # Run B if and only if A succeeded A || B # Run B if and only if A failed A & # Run A in background. * # wildcard for array of chars ? # wildcard for single char > # redirect shell output to file appends >> # redirect shell output to file overwrites ! # boolean NOT && # boolean AND || # boolean OR ** # exponentiation % # modulo ; # separate lines in terminal prompt networking # show list of all http port connections active, use sudo with lsof to include system connections netstat -ap tcp || grep -i \u201clisten\u201d lsof -PiTCP -sTCP:LISTEN # make an http request and trace out what happens on the way curl -verbose -trace-ascii debugdumplog.txt -o redirect output URL = regex [a-z]_ [0-9]_ ^ .\\* navigation which { package } # show address of version in use exec bash # restart shell printenv # show all env variables !histnum #run command from history chsh -s # change shell zsh bash etc type -a [ command ] df # show disk files on machine whoami # display user name chmod mkdir { name } # makes a directory with a name mv # move files to new directory pwd # what is present working directory stat --help # lots of good stuff ps -Eafx:: # shows information about the current processes running in shell loops # starts by expanding *.filetype for { x } in { *.filetype } ; do blah ; done ; # prints to output echo { text for anything to output } !! \u2014\u2014\u2014> last run command !$ \u2014\u2014\u2014\u2014> run last word of previous command scripts bash { script.sh } { $inputvar1 } .bashrc alias bind # PS1 is the environment variable that contains the shell prompt. https://tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html # '\\e[0;31m' is the terminal escape sequence to change color to red. # '\\u' is the user name # '\\e[m' means \"return to the default text color\" PS1 = \"\\e[0;32m\\h \\W\\:~ \\e[m \" ### red hostname cwd:~","title":"Bash"},{"location":"bash/#bash","text":"https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html","title":"Bash"},{"location":"bash/#grep-find-sed-awk","text":"# look through current directory's hieracrhy for text in file grep -rnw '/path/to/somewhere/' -e 'pattern' # recursively delete all files of a single extension find . -name \"*.bak\" -type f -delete # recursive print all file with extension .py find $directory -type f -name \"*.in\" find ./ -name '*article*' | xargs -I '{}' mv {} ../backup find ./ -name '*article*' | xargs mv -t ../backup","title":"grep find sed awk"},{"location":"bash/#io-operators","text":"wc # wordcount cat less sort -n head -n { how many } { file } tail -n { num } { file } file name { * [ ab ] .* } \u2014\u2014> prints files with a or b in that position uniq { file } \u2014> removes adjacent duplicated lines cut \u2014> removes portions of lines from a file w \u2014> prints current user and what they are doing # wc all text files in current directory wc *.txt A ; B # Run A and then B, regardless of success of A A && B # Run B if and only if A succeeded A || B # Run B if and only if A failed A & # Run A in background. * # wildcard for array of chars ? # wildcard for single char > # redirect shell output to file appends >> # redirect shell output to file overwrites ! # boolean NOT && # boolean AND || # boolean OR ** # exponentiation % # modulo ; # separate lines in terminal prompt","title":"i/o &amp; operators"},{"location":"bash/#networking","text":"# show list of all http port connections active, use sudo with lsof to include system connections netstat -ap tcp || grep -i \u201clisten\u201d lsof -PiTCP -sTCP:LISTEN # make an http request and trace out what happens on the way curl -verbose -trace-ascii debugdumplog.txt -o redirect output URL =","title":"networking"},{"location":"bash/#regex","text":"[a-z]_ [0-9]_ ^ .\\*","title":"regex"},{"location":"bash/#navigation","text":"which { package } # show address of version in use exec bash # restart shell printenv # show all env variables !histnum #run command from history chsh -s # change shell zsh bash etc type -a [ command ] df # show disk files on machine whoami # display user name chmod mkdir { name } # makes a directory with a name mv # move files to new directory pwd # what is present working directory stat --help # lots of good stuff ps -Eafx:: # shows information about the current processes running in shell","title":"navigation"},{"location":"bash/#loops","text":"# starts by expanding *.filetype for { x } in { *.filetype } ; do blah ; done ; # prints to output echo { text for anything to output } !! \u2014\u2014\u2014> last run command !$ \u2014\u2014\u2014\u2014> run last word of previous command","title":"loops"},{"location":"bash/#scripts","text":"bash { script.sh } { $inputvar1 }","title":"scripts"},{"location":"bash/#bashrc","text":"alias bind # PS1 is the environment variable that contains the shell prompt. https://tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html # '\\e[0;31m' is the terminal escape sequence to change color to red. # '\\u' is the user name # '\\e[m' means \"return to the default text color\" PS1 = \"\\e[0;32m\\h \\W\\:~ \\e[m \" ### red hostname cwd:~","title":".bashrc"},{"location":"docker/","text":"Docker https://docs.docker.com/ https://github.com/LeCoupa/awesome-cheatsheets/blob/master/tools/docker.sh .dockerfile # https://hub.docker.com/ FROM ENV WORKDIR RUN COPY USER CMD","title":"Docker"},{"location":"docker/#docker","text":"https://docs.docker.com/ https://github.com/LeCoupa/awesome-cheatsheets/blob/master/tools/docker.sh","title":"Docker"},{"location":"docker/#dockerfile","text":"# https://hub.docker.com/ FROM ENV WORKDIR RUN COPY USER CMD","title":".dockerfile"},{"location":"gcloud/","text":"Gcloud gcloud gcloud info gcloud artifacts locations list gcloud iam list-grantable-roles","title":"Gcloud"},{"location":"gcloud/#gcloud","text":"","title":"Gcloud"},{"location":"gcloud/#gcloud_1","text":"gcloud info gcloud artifacts locations list gcloud iam list-grantable-roles","title":"gcloud"},{"location":"git/","text":"Git github help page on licensing Atlassian Git tutorial Git Cookbook Most Common Git tips & tricks create / initialize git init # or git clone https://github.com/xxxxxx merging branching git merge dev --allow-unrelated-histories git checkout -b $newbranch # get a new branch and switch to it git checkout -b $branchname_a / $branchname_b # get a local copy of a remote existing branch git checkout $branchname # switch branch git checkout --orphan $branchname # create branch without full history local push to existing remote touch README.md git init git add . git commit -m \"message\" git remote add origin https://github.com/user/nameofgit.git git pull origin master -v --allow-unrelated-histories // or git pull <remote> master:dev git push -u origin master summary of changes git log -n $num -p # $num:int recent commit diffs git log __branchA__ ^__branchB__ # commit diff btw branch A and B git log --pretty = oneline --stat --all __foldername__ # modified files under a given folder git fetch git pull origin __branchname__ git merge --no-ff __sourcebranch__ # merge into current branch source one without rebase/FF git push origin __destinationbranch__ # push merges/changesets to a branch # display the path of the repository git remote show origin # Change remote URI to xxx git remote set-url origin xxx undo changes git status # show status of uncommited files # revert a file git checkout __file__ # Checkout all changes to **file** from branch **branchname** into current git checkout __branchname__ __file__ # revert a full branch to specified revision if not commited git checkout __revision__ . # Reverts certain commits if commited git revert __commit1__ __commit2__ ... # revert a full branch to specified revision if commited git reset __revision__ . # remove all local uncommited modifications git clean -f # display local branches, active one is with a \\* git branch # Show changes in files git diff # show a diff between a local branch and a remote one git diff __branch__ origin/__remotebranch__ # rebases current branch with specified branch (fetches remote branch changes and then adds yurs at the tip) git rebase __branchname__ # delete a file from branch and filesystem git rm __filename__ # delete a local branch git branch -d __branchname__ # delete a remote brach git push origin --delete __branchname__ # show visual git log gitk __filename__ set config vars # reset to last commit (even if pushed). Can re-commit stuff but if already pushed will need t push with `--force`. git reset --soft HEAD~1 # squash all branch pushed commits previous to the one specified into a single commit with the dsired new message. git reset --soft <new-root-sha1> && git commit --amend -m \"<new message>\" && git push --force # Show diff between local commits and remote commits git log origin/__branchname__..__branchname__ # List currently setup config values git config --list # Setup global user name git config --global user.name \"Kartones\" # Setup global user email git config --global user.email \"d...@....net\" # Make git cache credentials for 8 hours git config --global credential.helper 'cache --timeout=28800' # Activate colors in diffs, etc. git config --global color.ui true # Fix Convert newlines to Unix-style ones (**Windows**) git config --global core.autocrlf true # Fix Convert newlines to Unix-style ones (**Unix**)\\* git config --global core.autocrlf input # Better diff highlighting (same for 3 following options) git config --global pager.log 'diff-highlight | less' git config --global pager.show 'diff-highlight | less' git config --global pager.diff 'diff-highlight | less' git config --global interactive.diffFilter diff-highlight # Init and update all submodules git submodule update --init --recursive # Retrieve and update all submodules (alt) git submodule init && git submodule update rm -Rf **submoduledir** git reset && git checkout . git checkout __branchname__ //help.github.com/articles/merging-a-pull-request ) git pull https://github.com/__username__/__reponame__.git __branchname__: [ Merge a pull request to local branch ]( https //git-scm.com/book/en/Git-Tools-Stashing ) current changes git stash: [ Stash ]( http # Unstash and merge stored changes git stash apply # Keep changes from incoming branch or local one, respectively. git checkout --theirs xxxx git checkout --ours xxxx # Blames original commit, not the move commit git blame -M # Looks at all commits in history git blame -CCC # merges and commits a specific commit to current branch git cherry-pick __commit__ # show all changes on all branches and revert to a specific one git reflog git reset HEAD@__commit__ # Squash a change on previous commit and change the commit message git commit --amend # Show both staged and unstaged changes that you will commit git diff --staged # Undo a commit removing it from history git reset --hard HEAD~1 git push origin <branch> --force # Tag any commit of a repo (e.g. with a certain version): git tag <label> <commit-id> git push origin <label> cli tools tig : to navigate commits & branches","title":"Git"},{"location":"git/#git","text":"github help page on licensing Atlassian Git tutorial Git Cookbook Most Common Git tips & tricks","title":"Git"},{"location":"git/#create-initialize","text":"git init # or git clone https://github.com/xxxxxx","title":"create / initialize"},{"location":"git/#merging-branching","text":"git merge dev --allow-unrelated-histories git checkout -b $newbranch # get a new branch and switch to it git checkout -b $branchname_a / $branchname_b # get a local copy of a remote existing branch git checkout $branchname # switch branch git checkout --orphan $branchname # create branch without full history","title":"merging branching"},{"location":"git/#local-push-to-existing-remote","text":"touch README.md git init git add . git commit -m \"message\" git remote add origin https://github.com/user/nameofgit.git git pull origin master -v --allow-unrelated-histories // or git pull <remote> master:dev git push -u origin master","title":"local push to existing remote"},{"location":"git/#summary-of-changes","text":"git log -n $num -p # $num:int recent commit diffs git log __branchA__ ^__branchB__ # commit diff btw branch A and B git log --pretty = oneline --stat --all __foldername__ # modified files under a given folder git fetch git pull origin __branchname__ git merge --no-ff __sourcebranch__ # merge into current branch source one without rebase/FF git push origin __destinationbranch__ # push merges/changesets to a branch # display the path of the repository git remote show origin # Change remote URI to xxx git remote set-url origin xxx","title":"summary of changes"},{"location":"git/#undo-changes","text":"git status # show status of uncommited files # revert a file git checkout __file__ # Checkout all changes to **file** from branch **branchname** into current git checkout __branchname__ __file__ # revert a full branch to specified revision if not commited git checkout __revision__ . # Reverts certain commits if commited git revert __commit1__ __commit2__ ... # revert a full branch to specified revision if commited git reset __revision__ . # remove all local uncommited modifications git clean -f # display local branches, active one is with a \\* git branch # Show changes in files git diff # show a diff between a local branch and a remote one git diff __branch__ origin/__remotebranch__ # rebases current branch with specified branch (fetches remote branch changes and then adds yurs at the tip) git rebase __branchname__ # delete a file from branch and filesystem git rm __filename__ # delete a local branch git branch -d __branchname__ # delete a remote brach git push origin --delete __branchname__ # show visual git log gitk __filename__","title":"undo changes"},{"location":"git/#set-config-vars","text":"# reset to last commit (even if pushed). Can re-commit stuff but if already pushed will need t push with `--force`. git reset --soft HEAD~1 # squash all branch pushed commits previous to the one specified into a single commit with the dsired new message. git reset --soft <new-root-sha1> && git commit --amend -m \"<new message>\" && git push --force # Show diff between local commits and remote commits git log origin/__branchname__..__branchname__ # List currently setup config values git config --list # Setup global user name git config --global user.name \"Kartones\" # Setup global user email git config --global user.email \"d...@....net\" # Make git cache credentials for 8 hours git config --global credential.helper 'cache --timeout=28800' # Activate colors in diffs, etc. git config --global color.ui true # Fix Convert newlines to Unix-style ones (**Windows**) git config --global core.autocrlf true # Fix Convert newlines to Unix-style ones (**Unix**)\\* git config --global core.autocrlf input # Better diff highlighting (same for 3 following options) git config --global pager.log 'diff-highlight | less' git config --global pager.show 'diff-highlight | less' git config --global pager.diff 'diff-highlight | less' git config --global interactive.diffFilter diff-highlight # Init and update all submodules git submodule update --init --recursive # Retrieve and update all submodules (alt) git submodule init && git submodule update rm -Rf **submoduledir** git reset && git checkout . git checkout __branchname__ //help.github.com/articles/merging-a-pull-request ) git pull https://github.com/__username__/__reponame__.git __branchname__: [ Merge a pull request to local branch ]( https //git-scm.com/book/en/Git-Tools-Stashing ) current changes git stash: [ Stash ]( http # Unstash and merge stored changes git stash apply # Keep changes from incoming branch or local one, respectively. git checkout --theirs xxxx git checkout --ours xxxx # Blames original commit, not the move commit git blame -M # Looks at all commits in history git blame -CCC # merges and commits a specific commit to current branch git cherry-pick __commit__ # show all changes on all branches and revert to a specific one git reflog git reset HEAD@__commit__ # Squash a change on previous commit and change the commit message git commit --amend # Show both staged and unstaged changes that you will commit git diff --staged # Undo a commit removing it from history git reset --hard HEAD~1 git push origin <branch> --force # Tag any commit of a repo (e.g. with a certain version): git tag <label> <commit-id> git push origin <label>","title":"set config vars"},{"location":"git/#cli-tools","text":"tig : to navigate commits & branches","title":"cli tools"},{"location":"markdown/","text":"Markdown templates </br> or \\ line breaks HEADER # h1 (with space after #) ## h2 ###### h6 LIST * list * ex * indent with tab * extra indent - [x] x it dawg - [ ] item up next - [x] @mentions , #refs , [links](), **formatting** , and <del>tags</del> unordered or ordered * list * above * indent with tab - [x] this is a complete item - [ ] this is an incomplete item - [x] @mentions , #refs , [links](), - [x] list syntax required (any unordered or ordered CODEBLOCK: ``` w/o the \\ escape \\```python def whatever(a): return a \\``` IMAGES ![ GitHub Logo ]( /images/logo.png ) LINKS [ GitHub ]( http://github.com ) EMOJIS :+1: :sparkles: :camel: :tada: \\ :rocket: :metal: :octocat: :+1: :sparkles: :camel: :tada: :rocket: :metal: :octocat: preview in vscode \"ctrl+v k\" to preview markdown format in new right-split tab","title":"Markdown"},{"location":"markdown/#markdown","text":"","title":"Markdown"},{"location":"markdown/#templates","text":"</br> or \\ line breaks HEADER # h1 (with space after #) ## h2 ###### h6 LIST * list * ex * indent with tab * extra indent - [x] x it dawg - [ ] item up next - [x] @mentions , #refs , [links](), **formatting** , and <del>tags</del> unordered or ordered * list * above * indent with tab - [x] this is a complete item - [ ] this is an incomplete item - [x] @mentions , #refs , [links](), - [x] list syntax required (any unordered or ordered CODEBLOCK: ``` w/o the \\ escape \\```python def whatever(a): return a \\``` IMAGES ![ GitHub Logo ]( /images/logo.png ) LINKS [ GitHub ]( http://github.com ) EMOJIS :+1: :sparkles: :camel: :tada: \\ :rocket: :metal: :octocat: :+1: :sparkles: :camel: :tada: :rocket: :metal: :octocat:","title":"templates"},{"location":"markdown/#preview","text":"in vscode \"ctrl+v k\" to preview markdown format in new right-split tab","title":"preview"},{"location":"python3/","text":"Python3 quick arrayname [:: - 1 ] # reverse, backwards zip ( * ARRAY ) # transpose array dir ( object ) # see all attributes [ ( do x ) for x in array if x == whatever ] lambda a , b : a + b pandas https://pandas.pydata.org/docs/reference/frame.html df = pd . Dataframe ( data , index = , columns = ) df . sort_values ( '' , ascending = ToF ) pd . concat ( df1 , df2 ) df . rename ( columns = { 'x' : 'y' }) df . drop ( columns = [ '' , '' ]) ### loop through files and build 1 df if isinstance ( df , pd . DataFrame ): df = pd . concat ([ df , nextin ], ignore_index = True ) else : df = nextin ### print n idxs around idx that satisfys condition idx = df . index . get_indexer_for ( condition . index ) print ( idx ) # array of ids that fit the condition above n = 2 input ( df . iloc [ np . unique ( np . concatenate ( [ np . arange ( max ( i - n , 0 ), min ( i + n + 1 , len ( df ))) for i in idx ]))]) ( df [ 'v' ] . shift () != df [ 'v' ]) . cumsum () #split continuous same df [ 'max_fwd' ] = df . price . rolling ( window = daysf ) . max () . shift ( 1 - daysf ) ### quick test print ( df . info ()) print ( df . iloc [:, [ columnsints ]]) datatypes a = TestClass ( 1000 ) a . instance_mthd ( 2 ) # Instance method, with 'self': 2000 TestClass . class_mthd ( 2 ) # Class method, with `cls`: 400 a . static_mthd ( 2 ) # Static method, with neither args: 2 pip which pip pip show $PACKAGE pip install $PACKAGE --user pip list builtin functions https://docs.python.org/3/library/functions.html open print compile eval exec input repr bytearray bytes vars dir format isinstance callable issubclass zip tuple # immutable seq objtype map sorted list filter frozenset set iter reversed slice len range enumerate breakpoint hash id next object bin oct hex int chr str ord ascii bool float complex dict divmod max min pow round all any @property getattr hasattr delattr type @staticmethod @classmethod super globals locals help useful libraries hashlib concurrent . futures argparse functools numba asyncio","title":"Python3"},{"location":"python3/#python3","text":"","title":"Python3"},{"location":"python3/#quick","text":"arrayname [:: - 1 ] # reverse, backwards zip ( * ARRAY ) # transpose array dir ( object ) # see all attributes [ ( do x ) for x in array if x == whatever ] lambda a , b : a + b","title":"quick"},{"location":"python3/#pandas","text":"https://pandas.pydata.org/docs/reference/frame.html df = pd . Dataframe ( data , index = , columns = ) df . sort_values ( '' , ascending = ToF ) pd . concat ( df1 , df2 ) df . rename ( columns = { 'x' : 'y' }) df . drop ( columns = [ '' , '' ]) ### loop through files and build 1 df if isinstance ( df , pd . DataFrame ): df = pd . concat ([ df , nextin ], ignore_index = True ) else : df = nextin ### print n idxs around idx that satisfys condition idx = df . index . get_indexer_for ( condition . index ) print ( idx ) # array of ids that fit the condition above n = 2 input ( df . iloc [ np . unique ( np . concatenate ( [ np . arange ( max ( i - n , 0 ), min ( i + n + 1 , len ( df ))) for i in idx ]))]) ( df [ 'v' ] . shift () != df [ 'v' ]) . cumsum () #split continuous same df [ 'max_fwd' ] = df . price . rolling ( window = daysf ) . max () . shift ( 1 - daysf ) ### quick test print ( df . info ()) print ( df . iloc [:, [ columnsints ]])","title":"pandas"},{"location":"python3/#datatypes","text":"a = TestClass ( 1000 ) a . instance_mthd ( 2 ) # Instance method, with 'self': 2000 TestClass . class_mthd ( 2 ) # Class method, with `cls`: 400 a . static_mthd ( 2 ) # Static method, with neither args: 2","title":"datatypes"},{"location":"python3/#pip","text":"which pip pip show $PACKAGE pip install $PACKAGE --user pip list","title":"pip"},{"location":"python3/#builtin-functions","text":"https://docs.python.org/3/library/functions.html open print compile eval exec input repr bytearray bytes vars dir format isinstance callable issubclass zip tuple # immutable seq objtype map sorted list filter frozenset set iter reversed slice len range enumerate breakpoint hash id next object bin oct hex int chr str ord ascii bool float complex dict divmod max min pow round all any @property getattr hasattr delattr type @staticmethod @classmethod super globals locals help","title":"builtin functions"},{"location":"python3/#useful-libraries","text":"hashlib concurrent . futures argparse functools numba asyncio","title":"useful libraries"},{"location":"ubuntu/","text":"Ubuntu https://tldp.org/HOWTO/Partition/index.html shortcuts Shift + Ctrl + PrtSc \u2013 Copy the screenshot of a selected region to the clipboard. loop file conversion # convert xlsx to csv for i in *.xlsx ; do libreoffice --headless --convert-to csv \" $i \" ; done root organizations /etc/systemd/* # https://systemd.io/ boot, service mgmt, stat # inode networking netstat -tunlp ss -tunlp nmcli wget curl ping ifconfig ### difficulties? connecting to unsecured wifi networks with login pages (ie airport, coffeeshop) sudo service network-manager restart ip route systemd-resolve --status iwconfig # check wifi speed /etc/resolv.conf # check the dns of a page if your phone connects to and then add it to you file ahead of 8.8.8.8 or your normal dns permissions chown # octal {rwx rwx rwx} represents permissions for { owner group other } #### credit https://linuxize.com/post/chmod-command-in-linux/ -rw-r--r-- 12 linuxize users 12 .0K Apr 8 20 :51 filename.txt | [ - ][ - ][ - ] - [ ------ ] [ --- ] | | | | | | | | | | | | | +-----------> 7 . Group | | | | | +-------------------> 6 . Owner | | | | +--------------------------> 5 . Alternate Access Method | | | +----------------------------> 4 . Others Permissions | | +-------------------------------> 3 . Group Permissions | +----------------------------------> 2 . Owner Permissions +------------------------------------> 1 . File Type #### chmod chgrp groups ## see all groups less /etc/passwd #or# getent passwd #### see all users groups USER ### groups for USER packages type PACKAGE #shows install path apt-cache policy PACKAGE apt-get # ppa-purge aptitude snap list other fdisk df ds ps conky sudo blkid hibernation issues systemctl hibernate cd /sys/power man busctl swapon --show sudo swapon /dev/sda2 # example of adding partition sudo nano/etc/fstab swapoff cat /proc/swaps cat /etc/initramfs-tools/conf.d/resume cat /etc/fstab lsblk sudo blkid #other dd # Copy a file, converting and formatting according to the operands. fdisk -l # Display or manipulate a disk partition table. user config in home folder .bashrc .bashprofile .zsh .profile .config/* cli tools ranger --- explorer / finder in ncdu --- shows size of all files sorted navigate with arrow keys","title":"Ubuntu"},{"location":"ubuntu/#ubuntu","text":"https://tldp.org/HOWTO/Partition/index.html","title":"Ubuntu"},{"location":"ubuntu/#shortcuts","text":"Shift + Ctrl + PrtSc \u2013 Copy the screenshot of a selected region to the clipboard.","title":"shortcuts"},{"location":"ubuntu/#loop-file-conversion","text":"# convert xlsx to csv for i in *.xlsx ; do libreoffice --headless --convert-to csv \" $i \" ; done","title":"loop file conversion"},{"location":"ubuntu/#root-organizations","text":"/etc/systemd/* # https://systemd.io/ boot, service mgmt, stat # inode","title":"root organizations"},{"location":"ubuntu/#networking","text":"netstat -tunlp ss -tunlp nmcli wget curl ping ifconfig ### difficulties? connecting to unsecured wifi networks with login pages (ie airport, coffeeshop) sudo service network-manager restart ip route systemd-resolve --status iwconfig # check wifi speed /etc/resolv.conf # check the dns of a page if your phone connects to and then add it to you file ahead of 8.8.8.8 or your normal dns","title":"networking"},{"location":"ubuntu/#permissions","text":"chown # octal {rwx rwx rwx} represents permissions for { owner group other } #### credit https://linuxize.com/post/chmod-command-in-linux/ -rw-r--r-- 12 linuxize users 12 .0K Apr 8 20 :51 filename.txt | [ - ][ - ][ - ] - [ ------ ] [ --- ] | | | | | | | | | | | | | +-----------> 7 . Group | | | | | +-------------------> 6 . Owner | | | | +--------------------------> 5 . Alternate Access Method | | | +----------------------------> 4 . Others Permissions | | +-------------------------------> 3 . Group Permissions | +----------------------------------> 2 . Owner Permissions +------------------------------------> 1 . File Type #### chmod chgrp groups ## see all groups less /etc/passwd #or# getent passwd #### see all users groups USER ### groups for USER","title":"permissions"},{"location":"ubuntu/#packages","text":"type PACKAGE #shows install path apt-cache policy PACKAGE apt-get # ppa-purge aptitude snap list","title":"packages"},{"location":"ubuntu/#other","text":"fdisk df ds ps conky sudo blkid","title":"other"},{"location":"ubuntu/#hibernation-issues","text":"systemctl hibernate cd /sys/power man busctl swapon --show sudo swapon /dev/sda2 # example of adding partition sudo nano/etc/fstab swapoff cat /proc/swaps cat /etc/initramfs-tools/conf.d/resume cat /etc/fstab lsblk sudo blkid #other dd # Copy a file, converting and formatting according to the operands. fdisk -l # Display or manipulate a disk partition table.","title":"hibernation issues"},{"location":"ubuntu/#user-config","text":"in home folder .bashrc .bashprofile .zsh .profile .config/*","title":"user config"},{"location":"ubuntu/#cli-tools","text":"ranger --- explorer / finder in ncdu --- shows size of all files sorted navigate with arrow keys","title":"cli tools"},{"location":"vscode/","text":"VSCode key shortcuts ctrl-l # highlight line ctrl-k + ctrl-r # open vscode keyboard shortcut helpsheet shift+ctrl+p # open command to search shift+ctrl+{up or down} # add second cursor, esc to deselect ctrl + shift + k # delete current line ctrl+k v # preview to right settings.json \"python.linting.pylintEnabled\": true, \"python.linting.enabled\": true","title":"VSCode"},{"location":"vscode/#vscode","text":"","title":"VSCode"},{"location":"vscode/#key-shortcuts","text":"ctrl-l # highlight line ctrl-k + ctrl-r # open vscode keyboard shortcut helpsheet shift+ctrl+p # open command to search shift+ctrl+{up or down} # add second cursor, esc to deselect ctrl + shift + k # delete current line ctrl+k v # preview to right","title":"key shortcuts"},{"location":"vscode/#settingsjson","text":"\"python.linting.pylintEnabled\": true, \"python.linting.enabled\": true","title":"settings.json"}]}